(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{23:function(e,t,n){e.exports=n(40)},28:function(e,t,n){},29:function(e,t,n){},30:function(e,t,n){},39:function(e,t,n){},40:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),o=n(20),i=n.n(o),l=n(2),s=n(3),c=n(5),p=n(4),d=n(6),u=n(11),m=n(12),h=n(10),g=n.n(h),f=function(e){function t(){return Object(l.a)(this,t),Object(c.a)(this,Object(p.a)(t).apply(this,arguments))}return Object(d.a)(t,e),Object(s.a)(t,[{key:"componentDidMount",value:function(){g()("#map-canvas","<script async type=\"text/javascript\" src=\"https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyBAP2QSAYcQU-LfJ41fFKuh4MFcmKW66DY\"><\/script>\n            <script> var map;\n            var mapStyle = [\n            {\n                \"featureType\": \"administrative\",\n                \"elementType\": \"all\",\n                \"stylers\": [\n                    {\n                        \"hue\": \"#000000\"\n                    },\n                    {\n                        \"lightness\": -100\n                    },\n                    {\n                        \"visibility\": \"off\"\n                    }\n                ]\n            },\n            {\n                'featureType': 'all',\n                'elementType': 'all',\n                'stylers': [{'visibility': 'off'}]\n            }, {\n                'featureType': 'landscape',\n                'elementType': 'geometry',\n                'stylers': [{'visibility': 'on'}, {'hue': '#fff'}, {'saturation': -100}, {'lightness': 30}]\n            }, \n            {\n                'featureType': 'water',\n                'elementType': 'labels',\n                'stylers': [{'visibility': 'off'}]\n            },\n            {\n                'featureType': 'water',\n                'elementType': 'geometry',\n                'stylers': [{'visibility': 'on'}, {'hue': '#fff'}, {'lightness': 100}, {'saturation': -80}]\n            }];\n\n            google.maps.event.addDomListener(window, 'load', function() {\n                map = new google.maps.Map(document.getElementById('map-canvas'), {\n                    center: { lat: 38, lng: 9.1 },\n                    zoom: 2.8,\n                    styles: mapStyle,\n                    disableDefaultUI: true,\n                    zoomControl: true,\n                    zoomControlOptions: {\n                        position: google.maps.ControlPosition.RIGHT_CENTER\n                    }\n                });\n\n                // map.data.addGeoJson(\n                //     'https://storage.googleapis.com/mapsdevsite/json/google.json');\n\n                map.data.setStyle(styleFeature);\n\n                map.data.addListener('mouseover', function(e) {\n                    map.data.setStyle(styleFeature);\n                });\n\n                map.data.addListener('mouseout', function(e) {\n                    map.data.setStyle(styleFeature);\n                });\n\n                \n\n\n                // Get the earthquake data (JSONP format)\n                // This feed is a copy from the USGS feed, you can find the originals here:\n                //   http://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson.php\n                var script = document.createElement('script');\n                script.setAttribute('src',\n                    'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_month.geojsonp');\n                document.getElementsByTagName('head')[0].appendChild(script);\n            });\n\n            // Defines the callback function referenced in the jsonp file.\n            function eqfeed_callback(data) {\n                map.data.addGeoJson(data);\n            }\n\n            function styleFeature(feature) {\n\n                var low = [326, 97, 45];   // color of mag 1.0\n                var high = [333, 79, 35];  // color of mag 6.0 and above\n                var minMag = 4.5;\n                var maxMag = 6.5\n\n                // fraction represents where the value sits between the min and max\n                var fraction = (Math.min(feature.getProperty('mag'), maxMag) - minMag) /\n                    (maxMag - minMag);\n                \n                var color = interpolateHsl(low, high, fraction);\n\n                return {\n                    icon: {\n                        path: google.maps.SymbolPath.CIRCLE,\n                        strokeWeight: 5,\n                        strokeColor: 'rgba(255,255,255,0.4)',\n                        fillColor: color,\n                        fillOpacity: 4 / feature.getProperty('mag'),\n                        // while an exponent would technically be correct, quadratic looks nicer\n                        scale: Math.pow(feature.getProperty('mag'), 1.5)\n                    },\n                    zIndex: Math.floor(feature.getProperty('mag'))\n                };\n            }\n\n            function interpolateHsl(lowHsl, highHsl, fraction) {\n                var color = [];\n                for (var i = 0; i < 3; i++) {\n                    // Calculate color based on the fraction.\n                    color[i] = (highHsl[i] - lowHsl[i]) * fraction + lowHsl[i];\n                }\n                return 'hsl(' + color[0] + ',' + color[1] + '%,' + color[2] + '%)';\n            }<\/script>")}},{key:"componentWillUnmount",value:function(){window.location.reload()}},{key:"render",value:function(){return r.a.createElement("div",{style:{height:"100%",width:"100%"},id:"map-canvas"})}}]),t}(a.Component),v=(n(28),function(e){function t(){return Object(l.a)(this,t),Object(c.a)(this,Object(p.a)(t).apply(this,arguments))}return Object(d.a)(t,e),Object(s.a)(t,[{key:"componentWillUnmount",value:function(){window.location.reload()}},{key:"render",value:function(){return r.a.createElement("div",{class:"test2-container",id:"gradient"},r.a.createElement("img",{className:"logo",src:"assets/Quake_Logo_COLOUR_wStapline.png",alt:""}),r.a.createElement("h2",null,"Animated linear gradient demo"))}}]),t}(a.Component)),y=(n(29),function(e){function t(){return Object(l.a)(this,t),Object(c.a)(this,Object(p.a)(t).apply(this,arguments))}return Object(d.a)(t,e),Object(s.a)(t,[{key:"componentDidMount",value:function(){g()("#scripts",'<script async type="text/javascript" src="test03-script.js"><\/script>')}},{key:"render",value:function(){return r.a.createElement("div",{className:"something"},r.a.createElement("canvas",{class:"mesh",width:"100%",height:"100%"}),r.a.createElement("div",{class:"stuff"},r.a.createElement("img",{className:"logo",src:"assets/Quake_Logo_WHITE_wStrapline.png",alt:""}),r.a.createElement("h2",null,"Animated mesh gradient demo")),r.a.createElement("div",{class:"controls"},r.a.createElement("input",{type:"text",value:"255,0,0",class:"rgbchoice choice1"}),r.a.createElement("br",null),r.a.createElement("input",{type:"text",value:"0,255,255",class:"rgbchoice choice2"}),r.a.createElement("br",null),r.a.createElement("input",{type:"text",value:"0,0,255",class:"rgbchoice choice3"}),r.a.createElement("br",null),r.a.createElement("input",{type:"text",value:"255,255,0",class:"rgbchoice choice4"}),r.a.createElement("br",null),r.a.createElement("button",{class:"new-random"},"Random"),r.a.createElement("button",{class:"start-rando"},"Start Slideshow")),r.a.createElement("div",{id:"scripts"}))}}]),t}(a.Component)),w=function(e){function t(){return Object(l.a)(this,t),Object(c.a)(this,Object(p.a)(t).apply(this,arguments))}return Object(d.a)(t,e),Object(s.a)(t,[{key:"componentDidMount",value:function(){g()("#map-canvas","<script language=\"javascript\" type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.3/p5.min.js\"><\/script>\n            <script language=\"javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.3/addons/p5.dom.min.js\"><\/script>\n            <script>\n            var mapimg;\n\n            var clat = 0;\n            var clon = 0;\n\n            var ww = 1200;\n            var hh = 600;\n\n            var zoom = 1;\n            var earthquakes;\n\n            function preload() {\n            // The clon and clat in this url are edited to be in the correct order.\n            mapimg = loadImage('https://api.mapbox.com/styles/v1/mapbox/dark-v9/static/' +\n                clon + ',' + clat + ',' + zoom + '/' +\n                ww + 'x' + hh +\n                '?access_token=pk.eyJ1Ijoiam9zZXBoaXphdHQiLCJhIjoiY2p2M3N3emE3MDBwNDRkcnl2OTRnYmF2NCJ9.HJac6SzYxeSk_cTv-OOjGA');\n            // earthquakes = loadStrings('https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.csv');\n            earthquakes = loadStrings('https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.csv');\n            }\n\n            function mercX(lon) {\n            lon = radians(lon);\n            var a = (256 / PI) * pow(2, zoom);\n            var b = lon + PI;\n            return a * b;\n            }\n\n            function mercY(lat) {\n            lat = radians(lat);\n            var a = (256 / PI) * pow(2, zoom);\n            var b = tan(PI / 4 + lat / 2);\n            var c = PI - log(b);\n            return a * c;\n            }\n\n\n            function setup() {\n                createCanvas(ww, hh);\n                translate(width / 2, height / 2);\n                imageMode(CENTER);\n                image(mapimg, 0, 0);\n\n                var cx = mercX(clon);\n                var cy = mercY(clat);\n\n                for (var i = 1; i < earthquakes.length; i++) {\n                    var data = earthquakes[i].split(/,/);\n                    //console.log(data);\n                    var lat = data[1];\n                    var lon = data[2];\n                    var mag = data[4];\n                    var x = mercX(lon) - cx;\n                    var y = mercY(lat) - cy;\n                    // This addition fixes the case where the longitude is non-zero and\n                    // points can go off the screen.\n                    if(x < - width/2) {\n                    x += width;\n                    } else if(x > width / 2) {\n                    x -= width;\n                    }\n                    mag = pow(25, mag);\n                    mag = sqrt(mag);\n                    var magmax = sqrt(pow(10, 10));\n                    var d = map(mag, 0, magmax, 0, 180);\n                    stroke(161, 18, 82);\n                    fill(255, 29, 50, 200);\n                    ellipse(x, y, d, d);\n                }\n\n            }\n        <\/script>")}},{key:"componentWillUnmount",value:function(){window.location.reload()}},{key:"render",value:function(){return r.a.createElement("div",{style:{height:"100%",width:"100%"},id:"map-canvas"})}}]),t}(a.Component),b=(n(30),function(e){function t(){return Object(l.a)(this,t),Object(c.a)(this,Object(p.a)(t).apply(this,arguments))}return Object(d.a)(t,e),Object(s.a)(t,[{key:"componentDidMount",value:function(){g()("#map-canvas","<script>// Setup the svg element size and margins\n            var margin = {top: 20, right: 20, bottom: 20, left: 20},\n                width = 1200 - margin.left - margin.right,\n                height = 800 - margin.top - margin.bottom;\n            \n            // Set the projection methods for the world map\n            var projection = d3.geoMercator()\n                               .translate([width/2, height/1.5])\n                               .scale((width - 1) / 2 / Math.PI);\n            \n            // Set the world map path\n            var path = d3.geoPath()\n                .projection(projection);\n            \n            // Create a variable to hold the main svg element\n            var svg = d3.select(\"#map-canvas\").append(\"svg\")\n                .attr(\"width\", width)\n                .attr(\"height\", height);\n            \n            // Group to hold the maps and borders\n            var g = svg.append('g')\n                       .attr('id', 'world-map');\n            \n            // Add a clip path element to the world map group\n            // for the x axis \n            g.append('clipPath')\n             .attr('id', 'clip-path')\n             .append('rect')\n             .attr('x', 0)\n             .attr('y', 30)\n             .attr('width', width)\n             .attr('height', height - 30)\n            \n            // Group to hold all of the earthquake elements\n            var gQuakes = svg.append('g')\n                             .attr('id', 'all-quakes');\n            \n            // Import the geoJSON file for the world map\n            d3.json('https://s3-us-west-2.amazonaws.com/s.cdpn.io/25240/world-110m.json', function(error, world) {\n                if(error) throw error;\n                \n                // Setup 24 hours ago object\n                var dateObj = new Date();\n                dateObj.setDate(dateObj.getDate() - 1);\n                \n                // Append the World Map\n                var worldMap = g.append('path')\n                 .attr('clip-path', 'url(#clip-path)') // attaches the clip path to not draw the map underneath the x axis\n                 .datum(topojson.merge(world, world.objects.countries.geometries)) // draws a single land object for the entire map\n                 .attr('class', 'land')\n                 .attr('d', path)\n                \n                // Append the World Map Country Borders\n                g.append('path')\n                 .datum(topojson.mesh(world, world.objects.countries, function(a, b) { return a !== b; }))\n                 .attr('class', 'boundry')\n                 .attr('d', path);\n                \n                // Create the x scale based on the domain of the 24 hour ago object and now\n                var x = d3.scaleTime()\n                                    .domain([dateObj, new Date()])\n                                    .range([0, width - margin.right - margin.left]);\n            \n                // Append the xAxis on top\n                var xAxis = svg.append('g')\n                                             .attr('id', 'xAxis')\n                                             .attr('transform', 'translate(20, 20)')\n                                             .call(d3.axisTop(x));\n                \n                // Import the last 24 hours of earthquake data from USGS\n                d3.json('https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson', function(error, data) {\n                    if(error) throw error;\n                    var quake = data.features.reverse();\n                    \n                    // Create a group with the quake id to hold the quake circle and pulse circle\n                    var earthquakeGroups = gQuakes.selectAll('g')\n                       .data(quake)\n                       .enter().append('g')\n                       .attr('id', function(d) {\n                             return d.id;\n                       })\n                       .attr('class', 'quake-group');\n                    \n                    //Create the pulse-circle circles for the earthquake pulse\n                    gQuakes.selectAll('.quake-group')\n                       .append('circle')\n                       .attr('class', 'circle pulse-circle')\n                       .attr('cx', function(d) {\n                             return projection([d.geometry.coordinates[0], d.geometry.coordinates[1]])[0];\n                       })\n                       .attr('cy', function(d) {\n                             return projection([d.geometry.coordinates[0], d.geometry.coordinates[1]])[1];\n                       })\n                         .attr('r', function(d) {\n                             return 0;\n                       })\n                       .attr('fill', '#ffe501');\n                    \n                    // Create the main quake circle with title\n                    gQuakes.selectAll('.quake-group')\n                      .append('circle')\n                        .attr('cx', function(d) {\n                             return projection([d.geometry.coordinates[0], d.geometry.coordinates[1]])[0];\n                       })\n                      .attr('cy', function(d) {\n                             return projection([d.geometry.coordinates[0], d.geometry.coordinates[1]])[1];\n                       })\n                      .attr('r', 0 )\n                      .attr('class', 'circle quake-circle')\n                      .style('fill', '#e60382')\n                      .style('opacity', 0.75)\n                      .append('title')\n                      .text(function(d) {\n                          return 'Magnitue ' + d.properties.mag + ' ' + d.properties.place;\n                      });\n            \n                    \n                    // Function that calculates the difference between the earthquake and 24 hours ago and\n                    // creates a delay property.\n                    var setQuakeDelay = function() {\n                        for(var i = 0, max = quake.length; i < max; i++){\n                            var timeDiff = quake[i].properties.time - dateObj;\n                            var timeDiffObj = new Date(timeDiff);\n                            quake[i].delay = Date.parse(timeDiffObj) / 9000; // Speed up the animation, otherwise it would take 24 hours ><\n                        }\n                    }\n                    setQuakeDelay();\n                    \n                    // Grab the longest delay for the xAxis marker\n                    var longestDelay = quake[quake.length - 1].delay;\n                    \n                    // Changes the radius of the earthquakes to their magnitue using a transition\n                    // and the delay created from the setQuakeDelay function\n                    var quakeCircles = svg.selectAll('.quake-circle')\n                         .data(quake)\n                         .transition()\n                         .delay(function(d) {\n                             return d.delay;\n                         })\n                         .duration(1000)\n                         .attr('r', function(d) {\n                           if(d.properties.mag < 0) {\n                                 return 0.1;\n                             } else {\n                                 return d.properties.mag * 4\t\t \n                             }\n                         });\n                    \n                    // Changes the radius of the pulse circle to eight times the magnitude\n                    // and fades out as it expands over two seconds\n                    var pulseCircles = svg.selectAll('.pulse-circle')\n                         .data(quake)\n                         .transition()\n                         .delay(function(d) {\n                             return d.delay;\n                         })\n                         .duration(2000)\n                         .attr('r', function(d) {\n                           if(d.properties.mag < 0) {\n                                 return 0.1 * 8;\n                             } else {\n                                  return d.properties.mag * 16;\n                             }\n                         })\n                         .style('opacity', 0.5)\n                       .remove()\n                    \n                    // Add the time marker that moves across the xAxis while the animation it playing.\n                    // It's not perfectly in sync, but it's close enough for this example. The length of \n                    // the animation is equal to the longest delay that we calculated earlier.\n                    var timeline = xAxis.append('circle')\n                         .attr('class', 'transition-circle')\n                         .attr('cx', 0)\n                         .attr('cy', 0)\n                         .attr('r', 3)\n                         .style('fill', 'white')\n                         .transition()\n                           .ease(d3.easeLinear)\n                         .duration(longestDelay + 1000)\n                         .attr('cx', 1120)\n                })\n            })<\/script>")}},{key:"componentWillUnmount",value:function(){window.location.reload()}},{key:"render",value:function(){return r.a.createElement("div",{id:"gradient"},r.a.createElement("div",{style:{height:"100%",width:"100%"},id:"map-canvas"},r.a.createElement("img",{className:"quake-logo",src:"assets/Quake_Logo_WHITE_wStrapline.png",width:"150px",alt:""})))}}]),t}(a.Component)),k=function(e){function t(){return Object(l.a)(this,t),Object(c.a)(this,Object(p.a)(t).apply(this,arguments))}return Object(d.a)(t,e),Object(s.a)(t,[{key:"render",value:function(){return r.a.createElement(u.a,null,r.a.createElement("div",null,r.a.createElement("div",{className:"page-wrapper"},r.a.createElement("div",{className:"side-menu"},r.a.createElement("div",null,r.a.createElement("div",{className:"description"},r.a.createElement("h1",{className:"title"},"Earthquake Data Vizualisations"),r.a.createElement("p",{className:"sub-p"},"Experiments for the Quake website"),r.a.createElement("p",{className:"author"},"by ",r.a.createElement("a",{href:"https://www.weaccelerategrowth.com"},"WeAccelerateGrowth"))),r.a.createElement("ul",{id:"menu-links"},r.a.createElement(u.b,{to:"/test-01"},r.a.createElement("li",null,"1. Google Map Hotspots")),r.a.createElement(u.b,{to:"/test-02"},r.a.createElement("li",null,"2. Linear Gradient Background")),r.a.createElement(u.b,{to:"/test-03"},r.a.createElement("li",null,"3. Gradient Mesh Background")),r.a.createElement(u.b,{to:"/test-04"},r.a.createElement("li",null,"4. Mapbox Hotspots")),r.a.createElement(u.b,{to:"/test-05"},r.a.createElement("li",null,"5. 24hr Live Data")),r.a.createElement(u.b,{to:"/test-06"},r.a.createElement("li",null,"6. 24hr Live Data - No Map")))),r.a.createElement("div",{className:"links"},r.a.createElement("a",{href:"https://github.com/weaccelerategrowth/earthquake-viz-proto"},r.a.createElement("img",{src:"/images/github-logo.svg",alt:"View the code on GitHub"})))),r.a.createElement("div",{className:"content"},r.a.createElement(m.a,{path:"/test-01",component:f}),r.a.createElement(m.a,{path:"/test-02",component:v}),r.a.createElement(m.a,{path:"/test-03",component:y}),r.a.createElement(m.a,{path:"/test-04",component:w}),r.a.createElement(m.a,{path:"/test-05",component:b}),r.a.createElement(m.a,{path:"/test-06",component:b})))))}}]),t}(a.Component);n(39);i.a.render(r.a.createElement(k,null),document.getElementById("root"))}},[[23,1,2]]]);
//# sourceMappingURL=main.433c8498.chunk.js.map